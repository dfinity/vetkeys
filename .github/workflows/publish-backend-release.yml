name: Publish and Release Backend

on:
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  release:
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/backend/ic_vetkeys')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Extract and validate version from branch name
        run: |
          BRANCH="${{ github.event.pull_request.head.ref }}"
          # Get the full tag name (everything after release/)
          VERSION_TAG="${BRANCH#release/}"
          # Extract just the version number for validation
          VERSION_NUMBER="${VERSION_TAG#backend/ic_vetkeys/}"
          # Validate version format
          if ! [[ $VERSION_NUMBER =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Version '$VERSION_NUMBER' does not follow the required format vx.y.z"
            exit 1
          fi
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
          echo "VERSION_NUMBER=$VERSION_NUMBER" >> $GITHUB_ENV
      - name: Verify Cargo.toml version
        run: |
          cd backend/rs/ic_vetkeys
          PKGID=$(cargo pkgid)
          CARGO_VERSION="v${PKGID##*@}"
          if [ "$CARGO_VERSION" != "${VERSION_NUMBER#v}" ]; then
            echo "Error: Cargo.toml version ($CARGO_VERSION) does not match release version (${VERSION_NUMBER#v})"
            exit 1
          fi
      - name: Mark as Latest Release in GitHub Releases
        env:
          GH_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        run: |
          gh release edit "${{ env.VERSION_TAG }}" --draft=false --prerelease=false --latest=true

  delete_release_branch:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - name: Delete release branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: git push origin --delete ${{ env.BRANCH }}
